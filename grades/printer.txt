=====STUDENT TESTS=====
====Good Tests====
===[STUDENT TESTS/good0.bminor Input]===
/* A program is a sequence of declarations */
/* Try a variety of variable declarations. */

n: integer;
m: integer = 20;
f1: float = 2.309;
f2: float = 2.2E5;

b: boolean;
c: boolean = true;
s: string;
t: string = "hello\n";
d: char;
e: char = 'x';

x: array [3] string;
y: array [3] string = { "a", "b", "c" };
z: array [3] array [3] string = { {"a","b","c"}, {"x","y","z"} };

g: array [3] string;
h: array [3] string = { "a", "b", "c" };
i: array [2] array [3] string = { {"a","b","c"}, {"x","y","z"} };
===[STUDENT TESTS/good0.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good0.bminor Output]===
n: integer;
m: integer = 20;
f1: float = 2.309;
f2: float = 220000;
b: boolean;
c: boolean = true;
s: string;
t: string = "hello\n";
d: char;
e: char = 'x';
x: array [3] string;
y: array [3] string = {"a", "b", "c"};
z: array [3] array [3] string = {{"a", "b", "c"}, {"x", "y", "z"}};
g: array [3] string;
h: array [3] string = {"a", "b", "c"};
i: array [2] array [3] string = {{"a", "b", "c"}, {"x", "y", "z"}};




===[STUDENT TESTS/good1.bminor Input]===
/* Display fibonnaci numbers from 0 to 45. */
fib: function integer ( x: integer ) = {
if( x<1 ) { return 0; } else {
if((x<2)) { return 1; } else {
return fib((x)-1) + fib((x-2)); // recursive step
} }}
===[STUDENT TESTS/good1.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good1.bminor Output]===
fib: function integer (x: integer) = {
    if (x<1) {
        return 0;
    } else {
        if (x<2) {
            return 1;
        } else {
            return fib(x-1)+fib(x-2);
        } 
    } 
} 




===[STUDENT TESTS/good10.bminor Input]===
/* Test various nestings of if-else statements */

testit: function boolean ( x: integer, y: integer ) = {

	/* If statement without braces */
	if( x<y ) print "less\n"; else print "low\n";

	/* If statement with braces */
	if( x<y ) { print "less\n"; } else { print "low\n"; }

	/* This statement should print nothing */
        if(20<10) if(10<20) print "incorrect!"; else print "dangling else!";

	/* statements and decls inside of if-else */

        if( x>y ) {
              i: integer;
              for(i=0;i<x;i++) print i, "\n";
        } else {
              i: integer;
              for(i=0;i<y;i++) print i, "\n";
        }

	/* A decl can come after a few statements */
	i: integer;

	/* try the other way around */
	for(i=0;i<x;i++) {
              if( i<x ) print "small"; else print "large";
        }

        return true;
}
===[STUDENT TESTS/good10.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good10.bminor Output]===
testit: function boolean (x: integer, y: integer) = {
    if (x<y) {
        print "less\n";
    } else {
        print "low\n";
    } 
    if (x<y) {
        print "less\n";
    } else {
        print "low\n";
    } 
    if (20<10) {
        if (10<20) {
            print "incorrect!";
        } else {
            print "dangling else!";
        } 
    } 
    if (x>y) {
        i: integer;
        for (i=0;i<x;i++) {
            print i, "\n";
        } 
    } else {
        i: integer;
        for (i=0;i<y;i++) {
            print i, "\n";
        } 
    } 
    i: integer;
    for (i=0;i<x;i++) {
        if (i<x) {
            print "small";
        } else {
            print "large";
        } 
    } 
    return true;
} 




===[STUDENT TESTS/good11.bminor Input]===
/* Now try some expressions */

x: integer = 65;
s: string = "hello";
b: boolean = false;

min: function integer ( a: integer, b: integer ) =
{
	if( a<b ) return a; else return b;
}

testfunc: function void ( z: integer ) =
{
	// Nested integer operators.
	y: integer = x*(x*10 + 55%6 + z/10);
	print "y: ", y, "\n";

	// Nested boolean operations.
	c: boolean = ( x<100 && y>200 ) || !(b=true);
	print "c: ", c, "\n";

	// Boolean operations on strings?
	d: boolean = (s == "goodbye");
	print "d: ", d, "\n";

	// Can we stack up assignments?
	z = y = x;

	a: array [100] integer;

	// Function calls and array accesses:
	y = min(a[10],a[20]);
}
===[STUDENT TESTS/good11.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good11.bminor Output]===
x: integer = 65;
s: string = "hello";
b: boolean = false;
min: function integer (a: integer, b: integer) = {
    if (a<b) {
        return a;
    } else {
        return b;
    } 
} 
testfunc: function void (z: integer) = {
    y: integer = x*(x*10+55%6+z/10);
    print "y: ", y, "\n";
    c: boolean = x<100&&y>200||!(b=true);
    print "c: ", c, "\n";
    d: boolean = s=="goodbye";
    print "d: ", d, "\n";
    z=y=x;
    a: array [100] integer;
    y=min(a[10], a[20]);
} 




===[STUDENT TESTS/good12.bminor Input]===
/* Check for minimum use of parentheses. */

testfunc: function void ( x: integer, y:integer, z:integer ) = {

          r: integer;
	  b: boolean;

          // Parens required
	  r = (x+y)/z;
	  r = x+(y+z);
	  b = (true||false) && (false||true);

          // Parens not required
	  r = x+(y/z);
	  r = (x+y)+z;
	  b = (x+y) < (x+z);
	  b = (true&&false) || (false&&true);

}
===[STUDENT TESTS/good12.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good12.bminor Output]===
testfunc: function void (x: integer, y: integer, z: integer) = {
    r: integer;
    b: boolean;
    r=(x+y)/z;
    r=x+(y+z);
    b=(true||false)&&(false||true);
    r=x+y/z;
    r=x+y+z;
    b=x+y<x+z;
    b=true&&false||false&&true;
} 




===[STUDENT TESTS/good13.bminor Input]===
// Test nested if-else statements
main: function void () = {
    x: integer = 3;
    y: integer = 5;
    if (x<y) {
        return x;
    } else if ((x)==(y)) {
        return 0;
    } else {
        return y;
    }
}
===[STUDENT TESTS/good13.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good13.bminor Output]===
main: function void () = {
    x: integer = 3;
    y: integer = 5;
    if (x<y) {
        return x;
    } else if (x==y) {
        return 0;
    } else {
        return y;
    } 
} 




===[STUDENT TESTS/good14.bminor Input]===
// Nested for loops
main: function void () = {
    i: integer;
    j: integer;
    for (i=0; i<10; i++) {
        for (j=0; j<10; j++) print(j);
    }
    return i;
}
===[STUDENT TESTS/good14.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good14.bminor Output]===
main: function void () = {
    i: integer;
    j: integer;
    for (i=0;i<10;i++) {
        for (j=0;j<10;j++) {
            print j;
        } 
    } 
    return i;
} 




===[STUDENT TESTS/good15.bminor Input]===
// Block grouped statements
f: function void () = {
    x: integer = 5;
    {
        print "this is a grouped statement";
        y: float = 10;
        z: array [y] integer;
    }
    {
        if (!(x < y))
            print "True";
        else
            print "False";
    }
}
===[STUDENT TESTS/good15.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good15.bminor Output]===
f: function void () = {
    x: integer = 5;
    {
        print "this is a grouped statement";
        y: float = 10;
        z: array [y] integer;
    } 
    {
        if (!(x<y)) {
            print "True";
        } else {
            print "False";
        } 
    } 
} 




===[STUDENT TESTS/good16.bminor Input]===
// If - else statements
f: function void (temp: integer) = {
    if( temp>100 ) {
        print "It's really hot!\n";
    } else if( temp>70 ) {
        print "It's pretty warm.\n";
    } else {
        print "It's not too bad.\n";
    }

    // Single if statement
    if (true)
        print "There is no else statement";

    // Classic dangling else
    if (true)
        if (true)
            print true;
        else
            print false;

    // More complex statements
    ddl: integer = 3;
    i: integer;
    if (temp > 100)
        if (ddl > 5)
            for (i=0;i<10;i++)
                shout("YAYYYYYYY");
        else
            for (i=0;i<10;i++)
                shout("AHHHHHHHH");
        else
            if (tired) print "I\"ll take a nap instead";
            print;
    
    for(;;)
        if (true) print true;

    return 0;
}
===[STUDENT TESTS/good16.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good16.bminor Output]===
f: function void (temp: integer) = {
    if (temp>100) {
        print "It\'s really hot!\n";
    } else if (temp>70) {
        print "It\'s pretty warm.\n";
    } else {
        print "It\'s not too bad.\n";
    } 
    if (true) {
        print "There is no else statement";
    } 
    if (true) {
        if (true) {
            print true;
        } else {
            print false;
        } 
    } 
    ddl: integer = 3;
    i: integer;
    if (temp>100) {
        if (ddl>5) {
            for (i=0;i<10;i++) {
                shout("YAYYYYYYY");
            } 
        } else {
            for (i=0;i<10;i++) {
                shout("AHHHHHHHH");
            } 
        } 
    } else if (tired) {
        print "I\"ll take a nap instead";
    } 
    print;
    for (;;) {
        if (true) {
            print true;
        } 
    } 
    return 0;
} 




===[STUDENT TESTS/good17.bminor Input]===
// test types of literals
x:integer = 5;
c:char = 'A';
str:string = "hello";
iarr: array [4] integer = {1,2,3,4};
carr:array [4] char = {'a', 'b', 'c', 'd'};
barr:array [4] boolean = {true, false, true, true};
iaar: array [4] array [4] integer = {iarr, iarr, iarr, iarr};
===[STUDENT TESTS/good17.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good17.bminor Output]===
x: integer = 5;
c: char = 'A';
str: string = "hello";
iarr: array [4] integer = {1, 2, 3, 4};
carr: array [4] char = {'a', 'b', 'c', 'd'};
barr: array [4] boolean = {true, false, true, true};
iaar: array [4] array [4] integer = {iarr, iarr, iarr, iarr};




===[STUDENT TESTS/good18.bminor Input]===
//tests param lists
fxn: function integer (x:integer)=
{
	return x++;
}

fxn2: function char (x:integer, y:char, z:boolean)=
{
	if(y=='z')
		return 'Z';
	else
		return 'z';
}

fxn3: function char (x: array [] integer, y:char, z: array [] array [] boolean)=
{
	if(y=='z')
		return 'Z';
	else
		return 'z';
}
===[STUDENT TESTS/good18.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good18.bminor Output]===
fxn: function integer (x: integer) = {
    return x++;
} 
fxn2: function char (x: integer, y: char, z: boolean) = {
    if (y=='z') {
        return 'Z';
    } else {
        return 'z';
    } 
} 
fxn3: function char (x: array [] integer, y: char, z: array [] array [] boolean) = {
    if (y=='z') {
        return 'Z';
    } else {
        return 'z';
    } 
} 




===[STUDENT TESTS/good19.bminor Input]===
// If and logical operators
f: function void () = {
    x: integer = 0;
    y: integer = 1;
    if (x && (y || true)) {
        print "Hello from if";
    } else print "One line else statement";
    return;
}
===[STUDENT TESTS/good19.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good19.bminor Output]===
f: function void () = {
    x: integer = 0;
    y: integer = 1;
    if (x&&(y||true)) {
        print "Hello from if";
    } else {
        print "One line else statement";
    } 
    return;
} 




===[STUDENT TESTS/good2.bminor Input]===
/* Test nested braces */
main: function void() = {
    {
        {
            if (true) return;
        }
    }
}
===[STUDENT TESTS/good2.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good2.bminor Output]===
main: function void () = {
    if (true) {
        return;
    } 
} 





===[STUDENT TESTS/good3.bminor Input]===
// test block creations
x:integer;
main:function void() = {
 for(;;)
 {
  x:integer = 5;
  {
   x:integer = 6;
   print x;
  }
 }

 if(x > 5)
 {
  x++;
 }
}
funct2: function void() = {
 {
  print "hello";
 }
 if(x > 5)
  if(x < 5)
  {
   x++;
  }
 else
 {
  x++;
  x--;
 }  
 
}
===[STUDENT TESTS/good3.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good3.bminor Output]===
x: integer;
main: function void () = {
    for (;;) {
        x: integer = 5;
        {
            x: integer = 6;
            print x;
        } 
    } 
    if (x>5) {
        x++;
    } 
} 
funct2: function void () = {
    {
        print "hello";
    } 
    if (x>5) {
        if (x<5) {
            x++;
        } else {
            x++;
            x--;
        } 
    } 
} 




===[STUDENT TESTS/good4.bminor Input]===
main: function void () = {
    x: integer = 3;
    y: integer = -3;
    if (!(x+y)) print "case1";
    else if (x&&y) print "case2";
    else if (((x))||y) print "case3";
    else if ((x)/(y-2)) print "case4";
    else print "case5";
    return x+y;
}
===[STUDENT TESTS/good4.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good4.bminor Output]===
main: function void () = {
    x: integer = 3;
    y: integer = -3;
    if (!(x+y)) {
        print "case1";
    } else if (x&&y) {
        print "case2";
    } else if (x||y) {
        print "case3";
    } else if (x/(y-2)) {
        print "case4";
    } else {
        print "case5";
    } 
    return x+y;
} 




===[STUDENT TESTS/good5.bminor Input]===
/* Try accesssing arrays of various sizes; */

a: array [10] integer = {100,200,300,400,500,600,700,800,900};
b: array [10] integer;
c: array [10] array [10] integer;

testfunc: function void () = {
    i: integer;
    j: integer;

    for(i=0;i<10;i++) {
        b[i] = a[i] * 10;
    }

    for(i=0;i<5;i++) {
        b[i*2] = a[i] + b[i];
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            c[i][j] = i*j;
        }
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            print c[i][j];
            print " ";
        }
        print "\n";
    }
}
===[STUDENT TESTS/good5.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good5.bminor Output]===
a: array [10] integer = {100, 200, 300, 400, 500, 600, 700, 800, 900};
b: array [10] integer;
c: array [10] array [10] integer;
testfunc: function void () = {
    i: integer;
    j: integer;
    for (i=0;i<10;i++) {
        b[i]=a[i]*10;
    } 
    for (i=0;i<5;i++) {
        b[i*2]=a[i]+b[i];
    } 
    for (j=0;j<10;i++) {
        for (i=0;i<10;i++) {
            c[i][j]=i*j;
        } 
    } 
    for (j=0;j<10;i++) {
        for (i=0;i<10;i++) {
            print c[i][j];
            print " ";
        } 
        print "\n";
    } 
} 




===[STUDENT TESTS/good6.bminor Input]===
/* Function prototypes are declarations without bodies. */

ComputeAscii: function char ( c: char );

GetLength: function integer ( s: string, i: integer );

/* Function body has some code in it */

GetArea: function integer ( width: integer, height: integer ) =
{
	return width * height;
}
===[STUDENT TESTS/good6.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good6.bminor Output]===
ComputeAscii: function char (c: char);
GetLength: function integer (s: string, i: integer);
GetArea: function integer (width: integer, height: integer) = {
    return width*height;
} 




===[STUDENT TESTS/good7.bminor Input]===
/* A function contains a sequence of statements */
/* Some of those statements can be decls */

simplefunc: function void () = {
     x: integer;
     y: integer = 20;
     s: string = "hello world";
}
===[STUDENT TESTS/good7.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good7.bminor Output]===
simplefunc: function void () = {
    x: integer;
    y: integer = 20;
    s: string = "hello world";
} 




===[STUDENT TESTS/good8.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;

     // An expression with a semicolon
     z = 16 + x / y;

     // Print statement
     print "input is: ", x, " and ", y, "\n";

     // Simple if-else statement
     if( x < y ) {
         return true;
     } else {
         return false;
     }

}
===[STUDENT TESTS/good8.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good8.bminor Output]===
simplefunc: function boolean (x: integer, y: integer) = {
    z: integer = x*y;
    z=16+x/y;
    print "input is: ", x, " and ", y, "\n";
    if (x<y) {
        return true;
    } else {
        return false;
    } 
} 




===[STUDENT TESTS/good9.bminor Input]===
/* Try several variations of for-loops */

simplefunc: function void (r: integer, s: integer, t: integer ) = {

    i: integer;

    for( i=0; i<r; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<s; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<r; ) {
        print i,"\n";
        i++;
    }

    for(;;) print "forever!\n";
}
===[STUDENT TESTS/good9.bminor Status]===
return code: 0
Test passed successfully!

===[STUDENT TESTS/good9.bminor Output]===
simplefunc: function void (r: integer, s: integer, t: integer) = {
    i: integer;
    for (i=0;i<r;i++) {
        print i, "\n";
    } 
    i=0;
    for (;i<s;i++) {
        print i, "\n";
    } 
    i=0;
    for (;i<r;) {
        print i, "\n";
        i++;
    } 
    for (;;) {
        print "forever!\n";
    } 
} 




====Bad Tests====
=====HIDDEN TESTS=====
====Good Tests====
===[HIDDEN TESTS/good1.bminor Input]===
/* A program is a sequence of declarations */
/* Try a variety of variable declarations. */

n: integer;
m: integer = 20;

b: boolean;
c: boolean = false;
s: string;
t: string = "world\n";
d: char;
e: char = 'x';

f: float = 1.23;

x: array [] string;
y: array [] string = { "a", "b", "c" };
z: array [] array [] string = { {"a","b","c"}, {"x","y","z"} };

g: array [3] string;
h: array [3] string = { "a", "b", "c" };
i: array [2] array [3] string = { {"a","b","c"}, {"x","y","z"} };

===[HIDDEN TESTS/good1.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good1.bminor Output]===
n: integer;
m: integer = 20;
b: boolean;
c: boolean = false;
s: string;
t: string = "world\n";
d: char;
e: char = 'x';
f: float = 1.23;
x: array [] string;
y: array [] string = {"a", "b", "c"};
z: array [] array [] string = {{"a", "b", "c"}, {"x", "y", "z"}};
g: array [3] string;
h: array [3] string = {"a", "b", "c"};
i: array [2] array [3] string = {{"a", "b", "c"}, {"x", "y", "z"}};




===[HIDDEN TESTS/good10.bminor Input]===
/* Try accesssing arrays of various sizes; */

a: array [10] integer = {100,200,300,400,500,600,700,800,900};
b: array [10] integer;
c: array [10] array [10] integer;

testfunc: function void () = {
    i: integer;
    j: integer;

    for(i=0;i<10;i++) {
        b[i] = a[i] * 10;
    }

    for(i=0;i<5;i++) {
        b[i*2] = a[i] + b[i];
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            c[i][j] = i*j;
        }
    }

    for(j=0;j<10;i++) {
        for(i=0;i<10;i++) {
            print c[i][j];
            print " ";
        }
        print "\n";
    }
}

===[HIDDEN TESTS/good10.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good10.bminor Output]===
a: array [10] integer = {100, 200, 300, 400, 500, 600, 700, 800, 900};
b: array [10] integer;
c: array [10] array [10] integer;
testfunc: function void () = {
    i: integer;
    j: integer;
    for (i=0;i<10;i++) {
        b[i]=a[i]*10;
    } 
    for (i=0;i<5;i++) {
        b[i*2]=a[i]+b[i];
    } 
    for (j=0;j<10;i++) {
        for (i=0;i<10;i++) {
            c[i][j]=i*j;
        } 
    } 
    for (j=0;j<10;i++) {
        for (i=0;i<10;i++) {
            print c[i][j];
            print " ";
        } 
        print "\n";
    } 
} 




===[HIDDEN TESTS/good2.bminor Input]===
/* Function prototypes are declarations without bodies. */

ComputeAscii: function char ( c: char );

GetLength: function integer ( s: string, i: integer );

/* Function body has some code in it */

GetArea: function integer ( width: float, height: float ) =
{
	return width * height;
}

===[HIDDEN TESTS/good2.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good2.bminor Output]===
ComputeAscii: function char (c: char);
GetLength: function integer (s: string, i: integer);
GetArea: function integer (width: float, height: float) = {
    return width*height;
} 




===[HIDDEN TESTS/good3.bminor Input]===
/* A function contains a sequence of statements */
/* Some of those statements can be decls */

simplefunc: function void () = {
     x: integer;
     y: integer = 20;
     s: string = "hello world";
     f: float = 3.3e1;
}

===[HIDDEN TESTS/good3.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good3.bminor Output]===
simplefunc: function void () = {
    x: integer;
    y: integer = 20;
    s: string = "hello world";
    f: float = 33;
} 




===[HIDDEN TESTS/good4.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;

     // An expression with a semicolon
     z = 16 - x / y;

     r: integer = x + (y + z);

     // Print statement
     print "input is: ", x, " and ", y, "\n";

     // Simple if-else statement
     if( x <= y ) {
         return true;
     } else {
         return false;
     }

}

===[HIDDEN TESTS/good4.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good4.bminor Output]===
simplefunc: function boolean (x: integer, y: integer) = {
    z: integer = x*y;
    z=16-x/y;
    r: integer = x+(y+z);
    print "input is: ", x, " and ", y, "\n";
    if (x<=y) {
        return true;
    } else {
        return false;
    } 
} 




===[HIDDEN TESTS/good5.bminor Input]===
/* A function contains a sequence of statements */
/* Try decls and stmts and exprs together. */

simplefunc: function boolean ( x: integer, y: integer ) = {

     // A declaration
     z: integer = x * y;

     // An expression with a semicolon
     z = 16 + x / y;

     // Print statement
     print "input is: ", x, " and ", y, "\n";

     // Simple if-else statement
     if( x < y ) {
         return true;
     } else {
         return false;
     }

}

===[HIDDEN TESTS/good5.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good5.bminor Output]===
simplefunc: function boolean (x: integer, y: integer) = {
    z: integer = x*y;
    z=16+x/y;
    print "input is: ", x, " and ", y, "\n";
    if (x<y) {
        return true;
    } else {
        return false;
    } 
} 




===[HIDDEN TESTS/good6.bminor Input]===
/* Try several variations of for-loops */

simplefunc: function void (r: integer, s: integer, t: integer ) = {

    i: integer;

    for( i=0; i<r; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<s; i++ ) {
        print i,"\n";
    }

    i=0;
    for( ; i<r; ) {
        print i,"\n";
        i++;
    }

    for(;;) print "forever!\n";
}

===[HIDDEN TESTS/good6.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good6.bminor Output]===
simplefunc: function void (r: integer, s: integer, t: integer) = {
    i: integer;
    for (i=0;i<r;i++) {
        print i, "\n";
    } 
    i=0;
    for (;i<s;i++) {
        print i, "\n";
    } 
    i=0;
    for (;i<r;) {
        print i, "\n";
        i++;
    } 
    for (;;) {
        print "forever!\n";
    } 
} 




===[HIDDEN TESTS/good7.bminor Input]===
/* Test various nestings of if-else statements */

testit: function boolean ( x: integer, y: integer ) = {

	/* If statement without braces */
	if( x<y ) print "less\n"; else print "low\n";

	/* If statement with braces */
	if( x<y ) { print "less\n"; } else { print "low\n"; }

	/* This statement should print nothing */
        if(20<10) if(10<20) print "incorrect!"; else print "dangling else!";

	/* statements and decls inside of if-else */

        if( x>y ) {
              i: integer;
              for(i=0;i<x;i++) print i, "\n";
        } else {
              i: integer;
              for(i=0;i<y;i++) print i, "\n";
        }

	/* A decl can come after a few statements */
	i: integer;

	/* try the other way around */
	for(i=0;i<x;i++) {
              if( i<x ) print "small"; else print "large";
        }

        return true;
}

===[HIDDEN TESTS/good7.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good7.bminor Output]===
testit: function boolean (x: integer, y: integer) = {
    if (x<y) {
        print "less\n";
    } else {
        print "low\n";
    } 
    if (x<y) {
        print "less\n";
    } else {
        print "low\n";
    } 
    if (20<10) {
        if (10<20) {
            print "incorrect!";
        } else {
            print "dangling else!";
        } 
    } 
    if (x>y) {
        i: integer;
        for (i=0;i<x;i++) {
            print i, "\n";
        } 
    } else {
        i: integer;
        for (i=0;i<y;i++) {
            print i, "\n";
        } 
    } 
    i: integer;
    for (i=0;i<x;i++) {
        if (i<x) {
            print "small";
        } else {
            print "large";
        } 
    } 
    return true;
} 




===[HIDDEN TESTS/good8.bminor Input]===
/* Now try some expressions */

x: integer = 65;
s: string = "hello";
b: boolean = false;

min: function integer ( a: integer, b: integer ) =
{
	if( a<b ) return a; else return b;
}

testfunc: function void ( z: integer ) =
{
	// Nested integer operators.
	y: integer = x*(x*10 + 55%6 + z/10);
	print "y: ", y, "\n";

	// Nested boolean operations.
	c: boolean = ( x<100 && y>200 ) || !(b=true);
	print "c: ", c, "\n";

	// Boolean operations on strings?
	d: boolean = (s == "goodbye");
	print "d: ", d, "\n";

	// Can we stack up assignments?
	z = y = x;

	a: array [100] integer;

	// Function calls and array accesses:
	y = min(a[10],a[20]);

	// float operations
	f: float = 3.4 + 5.6;
	g: float = 34.1e7 + 9.9e3;
}

===[HIDDEN TESTS/good8.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good8.bminor Output]===
x: integer = 65;
s: string = "hello";
b: boolean = false;
min: function integer (a: integer, b: integer) = {
    if (a<b) {
        return a;
    } else {
        return b;
    } 
} 
testfunc: function void (z: integer) = {
    y: integer = x*(x*10+55%6+z/10);
    print "y: ", y, "\n";
    c: boolean = x<100&&y>200||!(b=true);
    print "c: ", c, "\n";
    d: boolean = s=="goodbye";
    print "d: ", d, "\n";
    z=y=x;
    a: array [100] integer;
    y=min(a[10], a[20]);
    f: float = 3.4+5.6;
    g: float = 3.41e+08+9900;
} 




===[HIDDEN TESTS/good9.bminor Input]===
/* Check for minimum use of parentheses. */

testfunc: function void ( x: integer, y:integer, z:integer ) = {

          r: integer;
	  b: boolean;

          // Parens required
	  r = (x+y)/z;
	  r = x+(y+z);
	  b = (true||false) && (false||true);

          // Parens not required
	  r = x+(y/z);
	  r = (x+y)+z;
	  b = (x+y) < (x+z);
	  b = (true&&false) || (false&&true);

}

===[HIDDEN TESTS/good9.bminor Status]===
return code: 0
Test passed successfully!

===[HIDDEN TESTS/good9.bminor Output]===
testfunc: function void (x: integer, y: integer, z: integer) = {
    r: integer;
    b: boolean;
    r=(x+y)/z;
    r=x+(y+z);
    b=(true||false)&&(false||true);
    r=x+y/z;
    r=x+y+z;
    b=x+y<x+z;
    b=true&&false||false&&true;
} 




====Bad Tests====
===== SUMMARIZED PRINTER RESULTS =====
{
  "student_tests": {
    "Good": {
      "correct": 20,
      "incorrect": 0
    }
  },
  "hidden_tests": {
    "Good": {
      "correct": 10,
      "incorrect": 0
    }
  }
}

Printer Project
---------------

General Structure (20/20 points)
----------------------------------------------
Program stucture checks out and looks well formed

Construction of the abstract syntax tree and coverage of all language elements (30/30 points)
----------------------------------------------

Indentation of Blocks (10 points)
Nicely done! Indenting is consistent

Parentheses Display: (10 points)
Good job! Parentheses only appear where necessary.

Spacing of Expressions: (10 points)
Expressions formatting appears to be correct

Student Tests (20/20 points)
------------------------------------------
Nice test coverage

Hidden Tests (20/20 points)
------------------------------------------
Good work passing all of the hidden tests

Coding Style (10/10 points)
------------------------------------------
Coding style looks quite nice. Well done!

---------------
